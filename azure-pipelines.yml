# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python


pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Test
  jobs:
  - job: Test
    displayName: Unit Tests
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7
    - bash: |
        pip install -r ./requirements.txt
        pip install pytest
        pip install pytest-cov
      displayName:  Install dependencies
    - bash: |
        pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --cov-config=coveragerc
      displayName: Run tests
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

# - stage: Build
#   jobs:
#     - job: Build
#       displayName: Build
#       workspace:
#           clean: all
  
#       steps:
#       - bash: |
#           if [ -f extensions.csproj ]
#           then
#               dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
#           fi
#         workingDirectory: $(workingDirectory)
#         displayName: 'Build extensions'
  
#       - task: UsePythonVersion@0
#         displayName: "Setting python version to 3.7 as required by functions"
#         inputs:
#           versionSpec: '3.7'
#           architecture: 'x64'
  
#       - bash: |
#           if [ -f extensions.csproj ]
#           then
#               dotnet build extensions.csproj --output ./bin
#           fi
#           pip install --target="$(workingDirectory)/.python_packages/lib/site-packages" -r ./requirements.txt
#         displayName: 'Install tools and dependencies'  
      
#       - bash: tree -a
  
#       - task: CopyFiles@2
#         displayName: 'Copy code to: $(Build.ArtifactStagingDirectory) '
#         inputs:
#           SourceFolder: '$(System.DefaultWorkingDirectory)'
#           Contents: |
#               **/*
#               !.git/**/*
#               !tests/**/*
#               !.*
#               !*.yml
#               !ARM/**/*
#               !htmlcov/**/*
#               !junit/**/*
#               !.vscode/**/*
#               !.pytest*/**/*
#               !coverage.xml
#               !coveragerc
#           TargetFolder: '$(Build.ArtifactStagingDirectory)'
  
#       - task: ArchiveFiles@2
#         displayName: "Create deployment zip"
#         inputs:
#           rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
#           includeRootFolder: false
#           archiveFile: "$(Build.ArtifactStagingDirectory)/build$(Build.BuildId).zip"
  
#       - task: PublishBuildArtifacts@1
#         inputs:
#           PathtoPublish: '$(Build.ArtifactStagingDirectory)/build$(Build.BuildId).zip'
#           artifactName: 'drop'

# - stage: DeployDEV
#   displayName: Deploy to dev environment
#   dependsOn: Build
#   condition:  succeeded()
#   variables:
#   - group: webalerts-dev-vargroup

#   jobs:
#     - template: azure-pipelines-deploy-template.yml
#       parameters:
#         azureSub: rg-webnotifications_dev
#         environment: development
#         funcAppName: $(FunctionAppName)

# - stage: DeployPROD
#   displayName: Deploy to production environment
#   dependsOn: Build
#   condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#   variables:
#   - group: webalerts-prod-vargroup

#   jobs:
#     - template: azure-pipelines-deploy-template.yml
#       parameters:
#         azureSub: rg-webnotifications
#         environment: production
#         funcAppName: $(FunctionAppName)
